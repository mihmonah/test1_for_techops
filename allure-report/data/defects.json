{
  "defectsList" : [ {
    "title" : "Product defects",
    "status" : "FAILED",
    "defects" : [ {
      "uid" : "17e8d49eafce7fcb",
      "failure" : {
        "message" : "NoSuchElementException: Message: Unable to locate element: .converter-result\n",
        "stackTrace" : "resource_setup = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"900f66fe-92b4-4b73-a4ec-2bb78fe229ab\")>\nparam_test_for_insert_convertation_sum = ('0.99', '0,99')\n\n    @allure.feature('Test: \"insert convertation sum\"')\n    def test_insert_convertation_sum(resource_setup, param_test_for_insert_convertation_sum):\n        (sum_in, sum_out) = param_test_for_insert_convertation_sum\n>       assert LeftMenu.check_insert_convertation_sum(resource_setup, sum_in, sum_out)\n\ntest_for_insert_convertation_sum.py:10: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nmenues.py:26: in check_insert_convertation_sum\n    b = resource.find_element(*LeftMenuLocators.RESULT).text.split('\\n')[1]\nc:\\users\\mike\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:752: in find_element\n    'value': value})['value']\nc:\\users\\mike\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:236: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0350C530>\nresponse = {'status': 404, 'value': '{\"error\":\"no such element\",\"message\":\"Unable to locate element: .converter-result\",\"stacktra...nfo>\\\\n   3:   0x6755a7 - <no info>\\\\n   4:   0x66f822 - <no info>\\\\n   5: 0x77449902 - RtlInitializeExceptionChain\"}'}\n\n    def check_response(self, response):\n        \"\"\"\n            Checks that a JSON response from the WebDriver does not have an error.\n    \n            :Args:\n             - response - The JSON response from the WebDriver server as a dictionary\n               object.\n    \n            :Raises: If the response contains an error message.\n            \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n    \n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            try:\n                                message = message['message']\n                            except TypeError:\n                                message = None\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = WebDriverException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException and 'alert' in value:\n            raise exception_class(message, screen, stacktrace, value['alert'].get('text'))\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: Unable to locate element: .converter-result\n\nc:\\users\\mike\\appdata\\local\\programs\\python\\python36-32\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:192: NoSuchElementException"
      },
      "testCases" : [ {
        "uid" : "6526da79f9cd04c9",
        "name" : "test_insert_convertation_sum[min_incorrect]",
        "title" : "Test insert convertation sum [min_incorrect]",
        "time" : {
          "start" : 1487851156063,
          "stop" : 1487851203471,
          "duration" : 47408
        },
        "severity" : "NORMAL",
        "status" : "FAILED"
      }, {
        "uid" : "b296391ad6c82bc2",
        "name" : "test_insert_convertation_sum[incorrect_data_with_incorrect_answer]",
        "title" : "Test insert convertation sum [incorrect_data_with_incorrect_answer]",
        "time" : {
          "start" : 1487851275985,
          "stop" : 1487851323021,
          "duration" : 47036
        },
        "severity" : "NORMAL",
        "status" : "FAILED"
      } ]
    }, {
      "uid" : "6330c237a21e708c",
      "failure" : {
        "message" : "AssertionError: assert <function LeftMenu.check_insert_convertation_sum at 0x034203D8>(<selenium.webdriver.firefox.webdriver.WebDriver (session=\"e9f75c46-caaf-4408-85e3-e14f3a3d1b61\")>, '1000000000000', '1 000 000 000 000,00')\n +  where <function LeftMenu.check_insert_convertation_sum at 0x034203D8> = LeftMenu.check_insert_convertation_sum",
        "stackTrace" : "resource_setup = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"e9f75c46-caaf-4408-85e3-e14f3a3d1b61\")>\nparam_test_for_insert_convertation_sum = ('1000000000000', '1 000 000 000 000,00')\n\n    @allure.feature('Test: \"insert convertation sum\"')\n    def test_insert_convertation_sum(resource_setup, param_test_for_insert_convertation_sum):\n        (sum_in, sum_out) = param_test_for_insert_convertation_sum\n>       assert LeftMenu.check_insert_convertation_sum(resource_setup, sum_in, sum_out)\nE       assert <function LeftMenu.check_insert_convertation_sum at 0x034203D8>(<selenium.webdriver.firefox.webdriver.WebDriver (session=\"e9f75c46-caaf-4408-85e3-e14f3a3d1b61\")>, '1000000000000', '1 000 000 000 000,00')\nE        +  where <function LeftMenu.check_insert_convertation_sum at 0x034203D8> = LeftMenu.check_insert_convertation_sum\n\ntest_for_insert_convertation_sum.py:10: AssertionError"
      },
      "testCases" : [ {
        "uid" : "b703045eaf4a147a",
        "name" : "test_insert_convertation_sum[max_incorrect]",
        "title" : "Test insert convertation sum [max_incorrect]",
        "time" : {
          "start" : 1487851239998,
          "stop" : 1487851258316,
          "duration" : 18318
        },
        "severity" : "NORMAL",
        "status" : "FAILED"
      } ]
    }, {
      "uid" : "5f99be7431bbbfa7",
      "failure" : {
        "message" : "AssertionError: assert <function RightMenu.check_from_to_filters at 0x03420468>(<selenium.webdriver.firefox.webdriver.WebDriver (session=\"b6fb422c-5088-4fd8-a69c-b6bb9c142045\")>, '31.12.2005', '31.12.2002')\n +  where <function RightMenu.check_from_to_filters at 0x03420468> = RightMenu.check_from_to_filters",
        "stackTrace" : "resource_setup = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"b6fb422c-5088-4fd8-a69c-b6bb9c142045\")>\nparam_test_for_from_to_filter = ('31.12.2005', '31.12.2002')\n\n    @allure.feature('Test: \"input data to filters\"')\n    def test_input_data_to_filters(resource_setup, param_test_for_from_to_filter):\n        (data_from, data_to) = param_test_for_from_to_filter\n>       assert RightMenu.check_from_to_filters(resource_setup, data_from, data_to)\nE       assert <function RightMenu.check_from_to_filters at 0x03420468>(<selenium.webdriver.firefox.webdriver.WebDriver (session=\"b6fb422c-5088-4fd8-a69c-b6bb9c142045\")>, '31.12.2005', '31.12.2002')\nE        +  where <function RightMenu.check_from_to_filters at 0x03420468> = RightMenu.check_from_to_filters\n\ntest_from_to_filter.py:10: AssertionError"
      },
      "testCases" : [ {
        "uid" : "e231b751d69bd54",
        "name" : "test_input_data_to_filters[incorrect_dates]",
        "title" : "Test input data to filters [incorrect_dates]",
        "time" : {
          "start" : 1487851361041,
          "stop" : 1487851411363,
          "duration" : 50322
        },
        "severity" : "NORMAL",
        "status" : "FAILED"
      } ]
    }, {
      "uid" : "68ff25095940b26",
      "failure" : {
        "message" : "AssertionError: assert <function RightMenu.check_from_to_filters at 0x03420468>(<selenium.webdriver.firefox.webdriver.WebDriver (session=\"5a456ad9-84fa-4686-b195-fc5a7b27740b\")>, '31.01.2002', '31.01.2003')\n +  where <function RightMenu.check_from_to_filters at 0x03420468> = RightMenu.check_from_to_filters",
        "stackTrace" : "resource_setup = <selenium.webdriver.firefox.webdriver.WebDriver (session=\"5a456ad9-84fa-4686-b195-fc5a7b27740b\")>\nparam_test_for_from_to_filter = ('31.01.2002', '31.01.2003')\n\n    @allure.feature('Test: \"input data to filters\"')\n    def test_input_data_to_filters(resource_setup, param_test_for_from_to_filter):\n        (data_from, data_to) = param_test_for_from_to_filter\n>       assert RightMenu.check_from_to_filters(resource_setup, data_from, data_to)\nE       assert <function RightMenu.check_from_to_filters at 0x03420468>(<selenium.webdriver.firefox.webdriver.WebDriver (session=\"5a456ad9-84fa-4686-b195-fc5a7b27740b\")>, '31.01.2002', '31.01.2003')\nE        +  where <function RightMenu.check_from_to_filters at 0x03420468> = RightMenu.check_from_to_filters\n\ntest_from_to_filter.py:10: AssertionError"
      },
      "testCases" : [ {
        "uid" : "a5d2f59a159c390b",
        "name" : "test_input_data_to_filters[correct_dates_no_data]",
        "title" : "Test input data to filters [correct_dates_no_data]",
        "time" : {
          "start" : 1487851472708,
          "stop" : 1487851521377,
          "duration" : 48669
        },
        "severity" : "NORMAL",
        "status" : "FAILED"
      } ]
    } ]
  }, {
    "title" : "Test defects",
    "status" : "BROKEN",
    "defects" : [ ]
  } ]
}